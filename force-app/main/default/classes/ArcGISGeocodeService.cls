public with sharing class ArcGISGeocodeService {
    
    /**
     * M√©thode pour g√©ocoder des coordonn√©es en adresse
     * @param latitude Latitude du point
     * @param longitude Longitude du point
     * @return Adresse format√©e ou message d'erreur
     */
    @AuraEnabled
    public static String reverseGeocode(Decimal latitude, Decimal longitude) {
        try {
            System.debug('üåç D√©but g√©ocodage inverse pour: ' + latitude + ', ' + longitude);
            
            // Validation des param√®tres
            if (latitude == null || longitude == null) {
                throw new CalloutException('Coordonn√©es invalides');
            }
            
            // Construction de l'URL directe (ArcGIS public)
            String endpoint = 'https://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer/reverseGeocode';
            String params = '?location=' + longitude + ',' + latitude + 
                           '&outSR=4326&returnIntersection=false&f=json';
            String fullUrl = endpoint + params;
            
            System.debug('üîó URL appel√©e: ' + fullUrl);
            
            // Appel HTTP
            Http http = new Http();
            HttpRequest request = new HttpRequest();
            request.setEndpoint(fullUrl);
            request.setMethod('GET');
            request.setTimeout(10000); // 10 secondes
            
            HttpResponse response = http.send(request);
            System.debug('üì° Status Code: ' + response.getStatusCode());
            System.debug('üì° Response Body: ' + response.getBody());
            
            if (response.getStatusCode() == 200) {
                // Parser la r√©ponse JSON
                Map<String, Object> jsonResponse = (Map<String, Object>) JSON.deserializeUntyped(response.getBody());
                
                if (jsonResponse.containsKey('address')) {
                    Map<String, Object> address = (Map<String, Object>) jsonResponse.get('address');
                    String formattedAddress = formatAddress(address);
                    System.debug('‚úÖ Adresse trouv√©e: ' + formattedAddress);
                    return formattedAddress;
                } else if (jsonResponse.containsKey('error')) {
                    Map<String, Object> error = (Map<String, Object>) jsonResponse.get('error');
                    String errorMessage = (String) error.get('message');
                    System.debug('‚ùå Erreur API ArcGIS: ' + errorMessage);
                    throw new CalloutException('Erreur g√©ocodage: ' + errorMessage);
                } else {
                    System.debug('‚ö†Ô∏è Aucune adresse trouv√©e');
                    return 'Adresse non trouv√©e pour ces coordonn√©es';
                }
            } else {
                System.debug('‚ùå Erreur HTTP: ' + response.getStatusCode() + ' - ' + response.getBody());
                throw new CalloutException('Erreur de communication avec le service de g√©ocodage');
            }
            
        } catch (Exception e) {
            System.debug('üí• Exception dans reverseGeocode: ' + e.getMessage());
            System.debug('üí• Stack trace: ' + e.getStackTraceString());
            throw new CalloutException('Erreur lors du g√©ocodage: ' + e.getMessage());
        }
    }
    
    /**
     * Formate l'adresse √† partir de la r√©ponse ArcGIS
     * @param address Map contenant les √©l√©ments d'adresse
     * @return Adresse format√©e
     */
    private static String formatAddress(Map<String, Object> address) {
        List<String> addressParts = new List<String>();
        
        // Num√©ro et rue
        String streetNumber = (String) address.get('Addr_type');
        String street = (String) address.get('Address');
        if (String.isNotBlank(street)) {
            addressParts.add(street);
        }
        
        // Ville
        String city = (String) address.get('City');
        if (String.isNotBlank(city)) {
            addressParts.add(city);
        }
        
        // R√©gion/√âtat
        String region = (String) address.get('Region');
        if (String.isNotBlank(region)) {
            addressParts.add(region);
        }
        
        // Code postal
        String postalCode = (String) address.get('Postal');
        if (String.isNotBlank(postalCode)) {
            addressParts.add(postalCode);
        }
        
        // Pays
        String country = (String) address.get('CountryCode');
        if (String.isNotBlank(country)) {
            addressParts.add(country);
        }
        
        String formattedAddress = String.join(addressParts, ', ');
        
        // Si aucun √©l√©ment n'est trouv√©, utiliser LongLabel comme fallback
        if (String.isBlank(formattedAddress)) {
            formattedAddress = (String) address.get('LongLabel');
        }
        
        return String.isNotBlank(formattedAddress) ? formattedAddress : 'Adresse non disponible';
    }
}
