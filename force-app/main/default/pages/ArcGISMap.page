<apex:page showHeader="false" sidebar="false" standardStylesheets="false">
    <html>
    <head>
        <meta charset="utf-8" />
        <meta name="viewport" content="initial-scale=1, maximum-scale=1, user-scalable=no" />
        <title>ArcGIS Map</title>
        <style>
            html, body, #mapView {
                height: 100%;
                width: 100%;
                margin: 0;
                padding: 0;
            }
            #mapView {
                position: relative;
            }
        </style>
        
        <!-- ArcGIS Maps SDK 4.25 -->
        <link rel="stylesheet" href="https://js.arcgis.com/4.25/esri/themes/light/main.css" />
        <script src="https://js.arcgis.com/4.25/"></script>
        
        <script>
            console.log('üöÄ Script ArcGIS charg√© - d√©but');
            console.log('üîó Test de connexion vers js.arcgis.com...');
            console.log('üìÖ Timestamp:', new Date().toISOString());
        </script>
        
        <script>
            console.log('üì¶ Modules AMD charg√©s - d√©but');
            
            // Chargement des modules ArcGIS via AMD
            require([
                "esri/Map",
                "esri/views/MapView",
                "esri/geometry/Point",
                "esri/Graphic",
                "esri/symbols/SimpleMarkerSymbol",
                "esri/PopupTemplate",
                "esri/widgets/Popup",
                "esri/widgets/Search",
                "esri/widgets/Compass",
                "esri/widgets/Locate",
                "esri/widgets/BasemapToggle",
                "esri/widgets/Sketch",
                "esri/layers/GraphicsLayer",
                "esri/geometry/geometryEngine",
                "esri/geometry/support/webMercatorUtils",
                "esri/geometry/Extent",
                "esri/core/reactiveUtils"
            ], function(
                Map, MapView, Point, Graphic, SimpleMarkerSymbol, PopupTemplate,
                Popup, Search, Compass, Locate, BasemapToggle, Sketch,
                GraphicsLayer, geometryEngine, webMercatorUtils, Extent, reactiveUtils
            ) {
                console.log('‚úÖ Tous les modules ArcGIS 4.25 charg√©s avec succ√®s via AMD');
                
                // Variables globales
                let map, view, sketchWidget, sketchLayer;
                let isReadOnlyMode = false;
                let currentDrawingGraphic = null;

                // Initialisation de la carte
                async function initializeMap() {
                    try {
                        console.log('üó∫Ô∏è Initialisation de la carte ArcGIS...');
                        
                        // Cr√©er la carte
                        map = new Map({
                            basemap: "streets-vector"
                        });

                        // Cr√©er la vue
                        view = new MapView({
                            container: "mapView",
                            map: map,
                            center: [-0.1276, 51.5074], // Londres par d√©faut
                            zoom: 10,
                            // D√âSACTIVER le zoom clavier pour √©viter le conflit avec Chrome
                            constraints: {
                                keyboardNavigation: {
                                    enabled: false
                                }
                            },
                            // D√âSACTIVER les raccourcis clavier ArcGIS
                            popup: {
                                dockEnabled: false
                            }
                        });

                        // Attendre que la vue soit pr√™te
                        await view.when();
                        console.log('‚úÖ Vue de carte initialis√©e');

                        // Cr√©er la couche de dessin
                        sketchLayer = new GraphicsLayer();
                        map.add(sketchLayer);

                        // Initialiser les widgets
                        await initializeWidgets();
                        
                        // Charger la configuration des outils
                        await loadDrawingToolsConfig();
                        
                        // Configurer la communication postMessage
                        setupPostMessageCommunication();
                        
                        // Notifier que la carte est pr√™te
                        notifyMapReady();
                        
                    } catch (error) {
                        console.error('‚ùå Erreur initialisation carte:', error);
                    }
                }

                // Initialiser les widgets
                async function initializeWidgets() {
                    try {
                        // Widget de recherche
                        const searchWidget = new Search({
                            view: view,
                            includeDefaultSources: false,
                            sources: [{
                                url: "https://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer",
                                singleLineFieldName: "SingleLine",
                                name: "ArcGIS World Geocoding Service",
                                placeholder: "Rechercher une adresse...",
                                maxResults: 3,
                                maxSuggestions: 6,
                                minSuggestCharacters: 3
                            }]
                        });
                        view.ui.add(searchWidget, "top-left");

                        // Widget boussole
                        const compassWidget = new Compass({
                            view: view
                        });
                        view.ui.add(compassWidget, "top-left");

                        // Widget de localisation
                        const locateWidget = new Locate({
                            view: view,
                            useHeadingEnabled: false
                        });
                        view.ui.add(locateWidget, "top-left");

                        // Widget de basculement de fond de carte
                        const basemapToggle = new BasemapToggle({
                            view: view,
                            nextBasemap: "satellite"
                        });
                        view.ui.add(basemapToggle, "bottom-right");

                        console.log('‚úÖ Widgets initialis√©s');
                        
                    } catch (error) {
                        console.error('‚ùå Erreur initialisation widgets:', error);
                    }
                }

                // Charger la configuration des outils de dessin
                async function loadDrawingToolsConfig() {
                    try {
                        console.log('üîß Chargement configuration outils de dessin...');
                        
                        // Cr√©er et activer le widget Sketch
                        sketchWidget = new Sketch({
                            view: view,
                            layer: sketchLayer,
                            creationMode: "hybrid"
                        });
                        
                        view.ui.add(sketchWidget, "top-right");
                        console.log('‚úÖ Widget Sketch initialis√©');
                        
                        // √âcouter les √©v√©nements de dessin
                        sketchWidget.on("create", function(event) {
                            if (event.state === "complete") {
                                console.log('‚úÖ Forme dessin√©e:', event.graphic);
                                currentDrawingGraphic = event.graphic;
                                notifyDrawingComplete(event.graphic);
                            }
                        });
                        
                        sketchWidget.on("update", function(event) {
                            console.log('üîÑ Forme mise √† jour:', event.graphics);
                        });
                        
                        sketchWidget.on("delete", function(event) {
                            console.log('üóëÔ∏è Forme supprim√©e');
                            currentDrawingGraphic = null;
                            notifyDrawingDeleted();
                        });
                        
                    } catch (error) {
                        console.error('‚ùå Erreur configuration outils dessin:', error);
                    }
                }

                // Configurer la communication postMessage
                function setupPostMessageCommunication() {
                    try {
                        console.log('üì° Configuration communication postMessage...');
                        
                        // PROTECTION ANTI-CRASH : Intercepter les touches de zoom Chrome
                        document.addEventListener('keydown', function(event) {
                            // Intercepter Cmd+ et Cmd- (zoom Chrome)
                            if (event.metaKey && (event.key === '+' || event.key === '-' || event.key === '=')) {
                                console.log('üõ°Ô∏è Protection anti-crash : Zoom clavier intercept√©');
                                event.preventDefault();
                                event.stopPropagation();
                                return false;
                            }
                        }, true);
                        
                        window.addEventListener('message', function(event) {
                            console.log('üì® Message re√ßu:', event.data);
                            
                            if (event.data.type === 'GET_MAP_STATE') {
                                sendMapState();
                            } else if (event.data.type === 'CLEAR_MAP') {
                                clearMap();
                            } else if (event.data.type === 'SET_READONLY_MODE') {
                                setReadOnlyMode(event.data.readOnly);
                            }
                        });
                        
                        console.log('‚úÖ Communication postMessage configur√©e');
                        
                    } catch (error) {
                        console.error('‚ùå Erreur configuration postMessage:', error);
                    }
                }

                // Effacer la carte
                function clearMap() {
                    try {
                        sketchLayer.removeAll();
                        currentDrawingGraphic = null;
                        console.log('üóëÔ∏è Carte effac√©e');
                        
                        // Notifier la suppression
                        notifyDrawingDeleted();
                        
                    } catch (error) {
                        console.error('‚ùå Erreur effacement carte:', error);
                    }
                }

                // D√©finir le mode lecture seule
                function setReadOnlyMode(readOnly) {
                    try {
                        isReadOnlyMode = readOnly;
                        
                        if (readOnly) {
                            sketchWidget.disable();
                            console.log('üîí Mode lecture seule activ√©');
                        } else {
                            sketchWidget.enable();
                            console.log('‚úèÔ∏è Mode √©dition activ√©');
                        }
                        
                    } catch (error) {
                        console.error('‚ùå Erreur changement mode:', error);
                    }
                }

                // Envoyer l'√©tat de la carte
                function sendMapState() {
                    try {
                        const mapState = {
                            type: 'MAP_STATE',
                            hasGeometry: sketchLayer.graphics.length > 0,
                            geometryCount: sketchLayer.graphics.length,
                            center: view.center,
                            zoom: view.zoom
                        };
                        
                        window.parent.postMessage(mapState, '*');
                        console.log('üì§ √âtat de la carte envoy√©:', mapState);
                        
                    } catch (error) {
                        console.error('‚ùå Erreur envoi √©tat carte:', error);
                    }
                }

                // Notifier que la carte est pr√™te
                function notifyMapReady() {
                    try {
                        const message = {
                            type: 'MAP_READY',
                            timestamp: new Date().toISOString()
                        };
                        
                        window.parent.postMessage(message, '*');
                        console.log('üì§ Carte pr√™te notifi√©e');
                        
                    } catch (error) {
                        console.error('‚ùå Erreur notification carte pr√™te:', error);
                    }
                }

                // Notifier qu'un dessin est complet
                function notifyDrawingComplete(graphic) {
                    try {
                        const message = {
                            type: 'DRAWING_COMPLETE',
                            geometry: graphic.geometry,
                            timestamp: new Date().toISOString()
                        };
                        
                        window.parent.postMessage(message, '*');
                        console.log('üì§ Dessin complet notifi√©');
                        
                    } catch (error) {
                        console.error('‚ùå Erreur notification dessin complet:', error);
                    }
                }

                // Notifier qu'un dessin a √©t√© supprim√©
                function notifyDrawingDeleted() {
                    try {
                        const message = {
                            type: 'DRAWING_DELETED',
                            timestamp: new Date().toISOString()
                        };
                        
                        window.parent.postMessage(message, '*');
                        console.log('üì§ Suppression dessin notifi√©e');
                        
                    } catch (error) {
                        console.error('‚ùå Erreur notification suppression:', error);
                    }
                }

                // Initialiser la carte quand le DOM est pr√™t
                document.addEventListener('DOMContentLoaded', function() {
                    console.log('üöÄ DOM charg√©, initialisation de la carte...');
                    initializeMap();
                });
                
                // FORCER l'initialisation imm√©diate (au cas o√π DOMContentLoaded ne se d√©clenche pas)
                console.log('üöÄ Tentative d\'initialisation imm√©diate...');
                setTimeout(function() {
                    if (!map) {
                        console.log('‚ö†Ô∏è DOMContentLoaded non d√©clench√©, initialisation forc√©e...');
                        initializeMap();
                    }
                }, 1000);
                
            }); // Fin du require AMD
        </script>
    </head>
    <body>
        <div id="mapView"></div>
    </body>
    </html>
</apex:page>
