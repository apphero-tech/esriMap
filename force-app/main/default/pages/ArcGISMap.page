<apex:page showHeader="false" sidebar="false" standardStylesheets="false" docType="html-5.0">
    <html>
    <head>
        <meta charset="utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <title>ArcGIS Map</title>
        
        <!-- ArcGIS Maps SDK 4.33 -->
        <link rel="stylesheet" href="https://js.arcgis.com/4.33/esri/themes/light/main.css" />
        <script src="https://js.arcgis.com/4.33/init.js"></script>
        
        <style>
            html, body, #viewDiv {
                padding: 0;
                margin: 0;
                height: 100%;
                width: 100%;
                font-family: 'Avenir Next', 'Helvetica Neue', Helvetica, Arial, sans-serif;
            }
            
            /* Style pour le widget Search */
            .esri-search {
                width: 300px;
                max-width: 90vw;
            }
            
            .esri-search__input {
                border-radius: 6px;
                border: 2px solid #e1e5e9;
                font-size: 14px;
                padding: 8px 12px;
                transition: border-color 0.2s ease;
            }
            
            .esri-search__input:focus {
                border-color: #0079c1;
                outline: none;
                box-shadow: 0 0 0 3px rgba(0, 121, 193, 0.1);
            }
            
            .esri-search__suggestions {
                border-radius: 6px;
                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
                border: 1px solid #e1e5e9;
            }
            
            .esri-search__suggestion {
                padding: 10px 12px;
                border-bottom: 1px solid #f0f0f0;
                cursor: pointer;
                transition: background-color 0.2s ease;
            }
            
            .esri-search__suggestion:hover {
                background-color: #f8f9fa;
            }
            
            .esri-search__suggestion:last-child {
                border-bottom: none;
            }
        </style>
    </head>
    <body>
        <div id="viewDiv"></div>
        
        <script>
            require([
                "esri/Map",
                "esri/views/MapView",
                "esri/geometry/Point",
                "esri/Graphic",
                "esri/symbols/SimpleMarkerSymbol",
                "esri/PopupTemplate",
                "esri/widgets/Popup",
                "esri/widgets/Search",
                "esri/widgets/Compass",
                "esri/widgets/Locate",
                "esri/widgets/BasemapToggle",
                "esri/widgets/Sketch",
                "esri/layers/GraphicsLayer"
            ], function(Map, MapView, Point, Graphic, SimpleMarkerSymbol, PopupTemplate, Popup, Search, Compass, Locate, BasemapToggle, Sketch, GraphicsLayer) {
                
                console.log('üó∫Ô∏è Initialisation ArcGIS dans Visualforce...');
                
                // Cr√©er la carte
                const map = new Map({
                    basemap: "streets-navigation-vector"
                });

                // Cr√©er un GraphicsLayer d√©di√© pour les dessins Sketch
                const sketchLayer = new GraphicsLayer({
                    title: "Dessins utilisateur"
                });
                map.add(sketchLayer);
                
                // Cr√©er la vue
                const view = new MapView({
                    container: "viewDiv",
                    map: map,
                    center: [-73.5673, 45.5017], // Place Ville-Marie, Montr√©al
                    zoom: 15,
                    constraints: {
                        rotationEnabled: true, // Activer la rotation pour le Compass
                        rotationAngle: 0 // Commencer avec l'orientation nord
                    }
                });

                // Cr√©er et configurer le widget Search avec autocompl√©tion (sans g√©olocalisation)
                const searchWidget = new Search({
                    view: view,
                    sources: [{
                        url: "https://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer",
                        singleLineFieldName: "SingleLine",
                        name: "ArcGIS World Geocoding Service",
                        countryCode: "CAN", // Priorit√© au Canada
                        maxResults: 10,
                        maxSuggestions: 8,
                        minSuggestCharacters: 1,
                        searchExtent: view.extent
                    }],
                    autoComplete: true,
                    searchAllEnabled: false, // D√©sactiver la recherche globale pour √©viter la g√©olocalisation
                    includeDefaultSources: false, // Exclure les sources par d√©faut (incluant g√©olocalisation)
                    locationEnabled: false, // D√©sactiver explicitement la g√©olocalisation dans Search
                    popupEnabled: false, // On g√®re nos propres popups
                    resultGraphicEnabled: false, // On g√®re nos propres graphics
                    container: "searchContainer"
                });

                // Cr√©er et configurer le widget Compass (navigation)
                const compassWidget = new Compass({
                    view: view,
                    label: "R√©initialiser l'orientation nord"
                });

                // √âcouter les changements de rotation pour informer l'utilisateur
                view.watch("rotation", function(rotation) {
                    if (Math.abs(rotation) > 1) { // Si rotation significative
                        console.log('üß≠ Carte tourn√©e de', rotation.toFixed(1), 'degr√©s');
                        console.log('üí° Cliquez sur le compass pour remettre au nord');
                    }
                });

                // √âcouter les clics sur le compass
                compassWidget.on("click", function() {
                    console.log('üß≠ Compass cliqu√© - orientation remise au nord');
                });

                // Cr√©er et configurer le widget Locate (g√©olocalisation native ArcGIS)
                const locateWidget = new Locate({
                    view: view,
                    label: "Ma position",
                    useHeadingEnabled: true,
                    goToOverride: function(view, options) {
                        // Personnaliser le comportement de navigation vers la position
                        view.goTo({
                            target: options.target,
                            zoom: 18, // Zoom plus proche pour la position utilisateur
                            duration: 1000
                        });
                    }
                });

                // Cr√©er et configurer le widget BasemapToggle (changement de fond de carte)
                const basemapToggleWidget = new BasemapToggle({
                    view: view,
                    nextBasemap: "satellite", // Vue satellite comme alternative
                    label: "Basculer vers satellite"
                });

                // Cr√©er et configurer le widget Sketch (dessin de formes)
                const sketchWidget = new Sketch({
                    view: view,
                    layer: sketchLayer,
                    creationMode: "hybrid", // Permet cr√©ation et √©dition
                    label: "Outils de dessin",
                    // Configurer les outils disponibles
                    visibleElements: {
                        createTools: {
                            point: true,
                            polyline: true,
                            polygon: true,
                            rectangle: true,
                            circle: true
                        },
                        selectionTools: {
                            "lasso-selection": true,
                            "rectangle-selection": true
                        },
                        undoRedoMenu: true,
                        settingsMenu: true
                    }
                });

                // Attendre que le widget soit initialis√©
                sketchWidget.when(() => {
                    console.log('‚úÖ Widget Sketch initialis√© avec succ√®s');
                    console.log('üé® Outils disponibles: Point, Polyline, Polygon, Rectangle, Circle');
                });

                // Gestion simple des erreurs de g√©olocalisation
                locateWidget.on("locate-error", function(event) {
                    console.warn('‚ö†Ô∏è Erreur de g√©olocalisation:', event.error);
                    
                    if (event.error.code === 1) {
                        // Permission refus√©e
                        console.warn('‚ùå Permission de g√©olocalisation refus√©e par l\'utilisateur');
                    } else if (event.error.code === 2) {
                        // Position indisponible
                        console.warn('‚ùå Position indisponible');
                    } else if (event.error.code === 3) {
                        // Timeout
                        console.warn('‚è∞ Timeout de g√©olocalisation');
                    }
                });

                // G√©rer le succ√®s de g√©olocalisation
                locateWidget.on("locate", function(event) {
                    console.log('‚úÖ G√©olocalisation r√©ussie:', event);
                });

                // Ajouter le widget Locate √† la vue
                view.ui.add(locateWidget, "bottom-left");

                // Ajouter les widgets √† la vue selon les conventions ArcGIS
                view.ui.add(searchWidget, "top-left");      // Recherche (d√©j√† impl√©ment√©)
                view.ui.add(compassWidget, "top-right");   // Compass (navigation)
                view.ui.add(basemapToggleWidget, "top-right"); // BasemapToggle (changement de fond)
                view.ui.add(locateWidget, "bottom-left");  // Locate (g√©olocalisation)
                view.ui.add(sketchWidget, "bottom-right"); // Sketch (outils de dessin)
                // Zoom reste en "bottom-right" par d√©faut (coexiste avec Sketch)

                console.log('üéØ Widgets ajout√©s selon conventions ArcGIS:');
                console.log('  - Search: top-left (recherche)');
                console.log('  - Compass: top-right (navigation)');
                console.log('  - BasemapToggle: top-right (changement de fond)');
                console.log('  - Locate: bottom-left (g√©olocalisation)');
                console.log('  - Sketch: bottom-right (outils de dessin)');
                console.log('  - Zoom: bottom-right (par d√©faut, coexiste avec Sketch)');
                console.log('');
                console.log('üß≠ ROTATION ACTIV√âE:');
                console.log('  - PC: Shift + glisser pour tourner la carte');
                console.log('  - Mobile: Rotation avec deux doigts');
                console.log('  - Compass: Clic pour remettre au nord');

                // √âcouter la s√©lection d'une suggestion de recherche
                searchWidget.on("select-result", function(event) {
                    console.log('üîç Suggestion s√©lectionn√©e:', event);
                    
                    if (event.result) {
                        const result = event.result;
                        const location = result.extent || result.feature.geometry;
                        
                        if (location) {
                            // Centrer la carte sur le r√©sultat
                            if (location.extent) {
                                view.goTo(location.extent, { duration: 1000 });
                            } else {
                                view.goTo(location, { duration: 1000 });
                            }
                            
                            // Cr√©er un marqueur sur l'emplacement trouv√©
                            const point = location.extent ? location.extent.center : location;
                            const symbol = new SimpleMarkerSymbol({
                                color: [0, 122, 194], // Bleu ArcGIS
                                outline: {
                                    color: [255, 255, 255],
                                    width: 2
                                },
                                size: 12
                            });
                            
                            const graphic = new Graphic({
                                geometry: point,
                                symbol: symbol,
                                attributes: {
                                    latitude: point.latitude ? point.latitude.toFixed(6) : "N/A",
                                    longitude: point.longitude ? point.longitude.toFixed(6) : "N/A",
                                    address: result.name || "Adresse trouv√©e"
                                },
                                popupTemplate: popupTemplate
                            });
                            
                            // Nettoyer les anciens marqueurs et ajouter le nouveau
                            view.graphics.removeAll();
                            view.graphics.add(graphic);
                            
                            // Ouvrir imm√©diatement le popup avec "G√©ocodage en cours..."
                            view.openPopup({
                                title: "üìç Adresse",
                                content: `
                                    <div style="padding: 15px; text-align: center;">
                                        <div style="margin-bottom: 15px;">
                                            <img src="https://js.arcgis.com/4.33/esri/themes/base/images/Loading_Indicator.gif" alt="Loading..." width="20" height="20" />
                                        </div>
                                        <p style="font-size: 14px; color: #666; margin: 0;">
                                            G√©ocodage en cours...
                                        </p>
                                    </div>
                                `,
                                location: point
                            });
                            
                            // Faire le g√©ocodage en arri√®re-plan comme pour les clics manuels
                            performGeocoding(point.latitude, point.longitude, graphic);
                            
                            console.log('‚úÖ Carte centr√©e sur:', result.name, 'g√©ocodage en cours...');
                        }
                    }
                });
                
                // Cr√©er le PopupTemplate pour afficher les informations de g√©ocodage
                const popupTemplate = new PopupTemplate({
                    title: "üìç Informations de localisation",
                    content: [
                        {
                            type: "fields",
                            fieldInfos: [
                                {
                                    fieldName: "address",
                                    label: "Adresse",
                                    visible: true
                                },
                                {
                                    fieldName: "latitude",
                                    label: "Latitude",
                                    visible: true
                                },
                                {
                                    fieldName: "longitude",
                                    label: "Longitude",
                                    visible: true
                                }
                            ]
                        }
                    ]
                });
                
                // Configurer la vue pour g√©rer les clics sur les graphics
                view.when(() => {
                    // √âcouter les clics sur les graphics (pour les actions du popup)
                    view.on("click", function(event) {
                        // V√©rifier si on a cliqu√© sur un graphic
                        view.hitTest(event).then(function(response) {
                            if (response.results.length > 0) {
                                const graphic = response.results[0].graphic;
                                console.log('üéØ Graphic cliqu√©:', graphic);
                                
                                // Si le graphic a des actions, on peut les g√©rer ici
                                if (graphic.attributes && graphic.attributes.hasActions) {
                                    console.log('üéØ Actions disponibles sur le graphic');
                                }
                            }
                        });
                    });
                });
                
                view.when(() => {
                    console.log('‚úÖ Carte ArcGIS VF initialis√©e !');
                    
                    // Notifier le parent (LWC) que la carte est pr√™te
                    if (window.parent) {
                        window.parent.postMessage({
                            type: 'MAP_READY',
                            message: 'ArcGIS map initialized successfully'
                        }, '*');
                    }
                });
                
                // √âcouter les clics sur la carte
                view.on("click", function(event) {
                    const coords = {
                        longitude: event.mapPoint.longitude,
                        latitude: event.mapPoint.latitude
                    };
                    
                    console.log('üñ±Ô∏è Clic d√©tect√© - Coordonn√©es:', coords);
                    console.log('üìç Longitude:', coords.longitude);
                    console.log('üìç Latitude:', coords.latitude);
                    
                    // Envoyer les coordonn√©es au parent (LWC)
                    if (window.parent) {
                        window.parent.postMessage({
                            type: 'MAP_CLICK',
                            coordinates: coords
                        }, '*');
                        console.log('üì® Message envoy√© au parent LWC');
                    }
                    
                    // Cr√©er un point pour le popup
                    const point = new Point({
                        longitude: event.mapPoint.longitude,
                        latitude: event.mapPoint.latitude
                    });
                    
                    // Cr√©er un marqueur temporaire
                    const symbol = new SimpleMarkerSymbol({
                        color: [226, 119, 40],
                        outline: {
                            color: [255, 255, 255],
                            width: 2
                        }
                    });
                    
                    // Cr√©er le graphic avec le popup
                    const graphic = new Graphic({
                        geometry: point,
                        symbol: symbol,
                        popupTemplate: popupTemplate,
                        attributes: {
                            latitude: coords.latitude.toFixed(6),
                            longitude: coords.longitude.toFixed(6),
                            address: "G√©ocodage en cours..."
                        }
                    });
                    
                    // Nettoyer les anciens marqueurs et ajouter le nouveau
                    view.graphics.removeAll();
                    view.graphics.add(graphic);
                    
                    // Ouvrir imm√©diatement le popup avec "G√©ocodage en cours..."
                    view.openPopup({
                        title: "üìç Adresse",
                        content: `
                            <div style="padding: 15px; text-align: center;">
                                <div style="margin-bottom: 15px;">
                                    <img src="https://js.arcgis.com/4.33/esri/themes/base/images/Loading_Indicator.gif" alt="Loading..." width="20" height="20" />
                                </div>
                                <p style="font-size: 14px; color: #666; margin: 0;">
                                    G√©ocodage en cours...
                                </p>
                            </div>
                        `,
                        location: point
                    });
                    
                    // Faire le g√©ocodage en arri√®re-plan
                    performGeocoding(coords.latitude, coords.longitude, graphic);
                    
                    console.log('‚úÖ Popup ouvert imm√©diatement, g√©ocodage en cours');
                });
                
                // Fonction de g√©ocodage
                function performGeocoding(latitude, longitude, graphic) {
                    console.log('üåç D√©but g√©ocodage pour:', latitude, longitude);
                    
                    // Appel √† l'API ArcGIS Geocoding
                    const geocodeUrl = `https://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer/reverseGeocode?location=${longitude},${latitude}&outSR=4326&returnIntersection=false&f=json`;
                    
                    fetch(geocodeUrl)
                        .then(response => response.json())
                        .then(data => {
                            console.log('‚úÖ R√©ponse g√©ocodage:', data);
                            
                            if (data.address) {
                                const address = formatAddress(data.address);
                                console.log('üè† Adresse format√©e:', address);
                                
                                // Mettre √† jour le graphic avec l'adresse
                                graphic.attributes.address = address;
                                
                                console.log('‚úÖ Adresse mise √† jour dans le graphic');
                                
                                // Ouvrir automatiquement le popup avec l'adresse
                                view.openPopup({
                                    title: "üìç Adresse",
                                    content: `
                                        <div style="padding: 20px; text-align: center;">
                                            <div style="font-size: 16px; line-height: 1.4; color: #333;">
                                                ${address}
                                            </div>
                                        </div>
                                    `,
                                    location: graphic.geometry
                                });
                                
                                console.log('üéØ Popup ouvert automatiquement avec l\'adresse');
                            } else {
                                console.log('‚ö†Ô∏è Aucune adresse trouv√©e');
                                graphic.attributes.address = "Adresse non trouv√©e";
                                
                                // Ouvrir popup avec message d'erreur
                                view.openPopup({
                                    title: "üìç Adresse",
                                    content: `
                                        <div style="padding: 20px; text-align: center;">
                                            <div style="font-size: 16px; color: #d73a49; margin-bottom: 10px;">
                                                ‚ö†Ô∏è Adresse non trouv√©e
                                            </div>
                                            <div style="font-size: 14px; color: #666;">
                                                Impossible de r√©cup√©rer l'adresse pour ces coordonn√©es
                                            </div>
                                        </div>
                                    `,
                                    location: graphic.geometry
                                });
                            }
                        })
                        .catch(error => {
                            console.error('‚ùå Erreur g√©ocodage:', error);
                            graphic.attributes.address = "Erreur de g√©ocodage";
                            
                            // Ouvrir popup avec message d'erreur
                            view.openPopup({
                                title: "üìç Adresse",
                                content: `
                                    <div style="padding: 20px; text-align: center;">
                                        <div style="font-size: 16px; color: #d73a49; margin-bottom: 10px;">
                                            ‚ùå Erreur de g√©ocodage
                                        </div>
                                        <div style="font-size: 14px; color: #666;">
                                            Impossible de r√©cup√©rer l'adresse
                                        </div>
                                    </div>
                                `,
                                location: graphic.geometry
                            });
                        });
                }
                
                // Fonction de formatage d'adresse
                function formatAddress(addressData) {
                    const parts = [];
                    
                    if (addressData.Address) parts.push(addressData.Address);
                    if (addressData.City) parts.push(addressData.City);
                    if (addressData.Region) parts.push(addressData.Region);
                    if (addressData.Postal) parts.push(addressData.Postal);
                    if (addressData.CountryCode) parts.push(addressData.CountryCode);
                    
                    return parts.length > 0 ? parts.join(', ') : 'Adresse non disponible';
                }
                
                // √âcouter les messages du parent (LWC)
                window.addEventListener('message', function(event) {
                    console.log('üì® Message re√ßu du LWC:', event.data);
                    
                    if (event.data.type === 'CENTER_MAP') {
                        view.center = [event.data.longitude, event.data.latitude];
                        if (event.data.zoom) {
                            view.zoom = event.data.zoom;
                        }
                    } else if (event.data.type === 'GEOCODE_REQUEST') {
                        console.log('üåç Demande de g√©ocodage re√ßue:', event.data.coordinates);
                        
                        // Cr√©er un point pour le popup
                        const point = new Point({
                            longitude: event.data.coordinates.longitude,
                            latitude: event.data.coordinates.latitude
                        });
                        
                        // Cr√©er le graphic avec le popup
                        const graphic = new Graphic({
                            geometry: point,
                            symbol: new SimpleMarkerSymbol({
                                color: [226, 119, 40],
                                outline: { color: [255, 255, 255], width: 2 }
                            }),
                            popupTemplate: popupTemplate,
                            attributes: {
                                latitude: event.data.coordinates.latitude.toFixed(6),
                                longitude: event.data.coordinates.longitude.toFixed(6),
                                address: "G√©ocodage en cours..."
                            }
                        });
                        
                        // Nettoyer et ajouter le nouveau marqueur
                        view.graphics.removeAll();
                        view.graphics.add(graphic);
                        
                        // Ouvrir imm√©diatement le popup avec "G√©ocodage en cours..."
                        view.openPopup({
                            title: "üìç Adresse",
                            content: `
                                <div style="padding: 15px; text-align: center;">
                                    <div style="margin-bottom: 15px;">
                                        <img src="https://js.arcgis.com/4.33/esri/themes/base/images/Loading_Indicator.gif" alt="Loading..." width="20" height="20" />
                                    </div>
                                    <p style="font-size: 20px; color: #666; margin: 0;">
                                        G√©ocodage en cours...
                                    </p>
                                </div>
                            `,
                            location: point
                        });
                        
                        // Faire le g√©ocodage
                        performGeocoding(event.data.coordinates.latitude, event.data.coordinates.longitude, graphic);
                        
                        console.log('‚úÖ Popup ouvert depuis LWC, g√©ocodage en cours');
                    }
                });
            });
        </script>
    </body>
    </html>
</apex:page>
